apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-v1
  labels: { app: app, version: v1 }
spec:
  replicas: 1
  selector:
    matchLabels: { app: app, version: v1 }
  template:
    metadata:
      labels: { app: app, version: v1 }
    spec:
      containers:
      - name: app
        image: ghcr.io/remla23-team06/app:without-emojis
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: MODEL_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: model.service.url
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-v2
  labels: { app: app, version: v2 }
spec:
  replicas: 1
  selector:
    matchLabels: { app: app, version: v2 }
  template:
    metadata:
      labels: { app: app, version: v2 }
    spec:
      containers:
      - name: app
        image: ghcr.io/remla23-team06/app:with-emojis
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: MODEL_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: model.service.url
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-service
  labels:
    app: model-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: model-service
  template:
    metadata:
      labels:
        app: model-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      containers:
      - name: model-service
        image: ghcr.io/remla23-team06/model-service:5.2.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: app
spec:
  selector:
    app: app
  ports:
    - name: http
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: model-service
  labels:
    app: model-svc
spec:
  selector:
    app: model-service
  ports:
    - name: http
      port: 8000
      targetPort: 8000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
data:
  model.service.url: "http://model-service:8000"
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: my-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
      - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: my-entry-service
spec:
  gateways:
    - my-gateway
  hosts:
  - "*"
  http:
  - match:
    - queryParams:
        version:
          exact: "2.0.1"
    route:
    - destination:
        host: app
        subset: v2
  - match:
    - queryParams:
        version:
          exact: "0.1.1"
    route:
    - destination:
        host: app
        subset: v1
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app
        subset: v1
      weight: 90
    - destination:
        host: app
        subset: v2
      weight: 10
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: app
spec:
  host: app
  subsets:
  - name: v1
    labels:
      { app: app, version: v1 }
  - name: v2
    labels:
      { app: app, version: v2 }
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingress-ratelimit
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: 'envoy.filters.network.http_connection_manager'
              subFilter:
                name: 'envoy.filters.http.router'
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            '@type': type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: http_local_rate_limiter
              token_bucket:
                max_tokens: 10
                tokens_per_fill: 5
                fill_interval: 20s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
                - append_action: APPEND_IF_EXISTS_OR_ADD
                  header:
                    key: x-rate-limited
                    value: TOO_MANY_REQUESTS
              status:
                code: BadRequest
